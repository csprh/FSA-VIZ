<head>

<style>

html {
  font: normal 100%/1.5 Georgia,serif;
}



header {
  background-color: #000000;
  padding: 1em 0;
}

h1 {
  margin: 0;
  text-align: center;
}

.nav {
  margin: 0;
  padding: 0;
  list-style-type: none;
  text-align: center;
}

.nav li {
  display: inline-block;
}

.nav a {
  color: #fff;
  display: inline-block;
  padding: 0.5em 0.75em;
  background-color: #666;
  border-radius: 4px;
  text-decoration: none;
}

.nav a:hover {
  background-color: #000;
}

.nav .current {
  background-color: red;
}
body {

    height: 100%;
    width: 70%;
    margin: 0;
    padding: 0;

}

html {

    height: 100%;
    width: 100%;
    margin: 0;
    padding: 0;

}

header {

    position: absolute;
    width: 30%;
    height: 20%;
    line-height: 40px;
    text-align: center;
    color: white;
    z-index: 1000;

}

#globalArea {
  
    height: 100%;
    width: 100%;
    margin: 0;
    padding: 0;
}

a {
  color: #ff0000;
}


 </style>

    <meta charset="UTF-8">
    <title>FSA Data Demo</title>
  <!-- This demo shows how to use opensource library Gio.js to create an interactive 3D globe -->
  <!-- Know more fancier usage of Gio.js, see: 
       official website: http://giojs.org  
       github repo: https://github.com/syt123450/giojs
-->
<!--  For more interesting Giojs demo, see Giojs API Codepen Collection: https://codepen.io/collection/DkBobG/  -->
    <script src="https://rawgit.com/syt123450/giojs/master/examples/js/jquery.min.js"></script>
    <script src="https://rawgit.com/syt123450/giojs/master/examples/js/three.min.js"></script>
  <script src="https://rawgit.com/syt123450/giojs/master/build/gio.min.js"></script>
  
  <script src="https://raw.githack.com/csprh/FSA-VIZ/master/jsonWhole.js"></script>
  
    <!-- load data in this data script -->
</head>

<header>
  <h1>FSA/JGI Food Hazard Data Visualisation Competition: Dr Paul Hill</h1>
  This is an interactive globe showing FSA food hazard data from 2016 to 2020.
  Click on a country to show the visualisation of the data.  Arrows going
  from selected country show the selected country is the Origin of the data
  point and the destination is the issuing country.  Inward arrows show the
  converse relationship.  The number of moving glowing points on each
  connection is an indicator of the amount of data points in the
  four years covered. 
  <nav>
    <ul class="nav">
      <li><a class="current" href="OriginIssuingAll.html">Origin/Issuing Country Links</a></li>
      <li><a href="OriginAll.html">Origin Country</a></li>
      <li><a href="IssuingAll.html">Issuing Country</a></li>
      <li><a href="about.html">About</a></li>
    </ul>
  </nav>
</header>

<body>
 
<!--Create a <div> where the globe will be rendered -->
<div id="globalArea"></div>
</body>



<script>
// Get the container to hold the IO globe
var container = document.getElementById( "globalArea" );
// Create Gio.controller
var controller = new GIO.Controller( container );
//controller.setStyle("magic");
// Add data
controller.configure(true);
controller.configure(
{
	"control": {
		"stats": false,
		"disableUnmentioned": false,
		"lightenMentioned": true,
		"inOnly": false,
		"outOnly": false,
		"initCountry": "US",
		"halo": true,
		"transparentBackground": false,
		"autoRotation": false,
		"rotationRatio": 1
	},
	"color": {
		"surface": 1744048,
		"selected": 2141154,
		"in": 16777215,
		"out": 2141154,
		"halo": 2141154,
		"background": 0
	},
	"brightness": {
		"ocean": 0.5,
		"mentioned": 0.5,
		"related": 0.5
	}
}
);



for (let i = 0; i<data.length;i++){
  data[i].v = data[i].v*10000;
}
controller.addData( data );

// Initialize and render the globe
controller.init();
</script>
